---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: {{ .Release.Namespace }}
  name: web-database
  labels:
    app: postgres
    app.kubernetes.io/instance: postgres
    app.kubernetes.io/name: postgres
    {{- include "e2e-testing.labels" . | nindent 4 }}
  annotations:
    meta.helm.sh/release-name: postgres
    {{- include "e2e-testing.annotations" . | nindent 4 }}
spec:
  replicas: 3
  serviceName: database-e2e
  selector:
    matchLabels:
      app: database-backend
  template:
    metadata:
      labels:
        app: database-backend
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: database-backend
                topologyKey: topology.kubernetes.io/zone
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - web-frontend
                topologyKey: topology.kubernetes.io/zone
      serviceAccountName: {{.Values.postgres.serviceAccountName}}
      initContainers:
        - name: postegres-clean
          image: busybox:latest
          command:
            - /bin/sh
          args:
            - -c
            - rm -rf /var/lib/postgresql/data/*
            - rm -rf /var/lib/postgresql/data/.*
          {{- if (eq true .Values.postgres.statefulset.persistentData.enabled)}}
          volumeMounts:
            - name: data
              mountPath: "/var/lib/postgresql/data"
          {{- end}}
      containers:
        - name: postgres
          image: {{.Values.postgres.image.repo}}:{{.Values.postgres.image.tag}}
          imagePullPolicy: IfNotPresent
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: passwd
                  name: pg-password
            - name: POSTGRES_USER
              value: {{.Values.postgres.statefulset.env.postgresUser}}
            - name: POSTGRES_DB
              value: {{.Values.postgres.statefulset.env.postgresDB}
#            - name: PGPASSWORD
#              valueFrom:
#                secretKeyRef:
#                  key: passwd
#                  name: pg-password
#            - name: PGUSER
#              value: {{.Values.postgres.statefulset.env.postgresUser}}}
#            - name: PGDATABASE
#              value: {{.Values.postgres.statefulset.env.postgresDB}}
          ports:
            - containerPort: 5432
              name: sql
          {{- if (eq true .Values.postgres.statefulset.persistentData.enabled)}}
          volumeMounts:
            - name: data
              mountPath: "/var/lib/postgresql/data"
          {{- end }}
          lifecycle:
            postStart:
              exec:
                command:
                  - /bin/bash
                  - -c
                  - |
                    sleep 20;
                    psql -hlocalhost -c "CREATE TABLE IF NOT EXISTS web (id SERIAL PRIMARY KEY, value VARCHAR(10) NOT NULL )";
                    psql -hlocalhost -c "INSERT INTO web (value) VALUES('ok')";
      {{- if (eq false .Values.postgres.statefulset.persistentData.enabled)}}
      volumes:
        - name: data
          emptyDir: { }
      {{- else }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: {{.Values.postgres.statefulset.persistentData.className}}
        volumeMode: Filesystem
        resources:
          requests:
            storage: {{.Values.postgres.statefulset.persistentData.size}}
{{- end }}